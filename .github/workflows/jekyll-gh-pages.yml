name: Deploy GitHub Pages

on:
  push:
    branches: ["main"]
  workflow_dispatch:

permissions:
  contents: write
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # Get changed files for conditional processing
      - name: Get changed markdown files
        id: changed-files
        uses: tj-actions/changed-files@v41
        with:
          files: 'src/*.md'

      # Quality Gates - optimized for performance
      - name: Cache Node.js dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install markdownlint-cli
        run: npm install -g markdownlint-cli

      - name: Run markdownlint on changed files
        if: steps.changed-files.outputs.any_changed == 'true' || github.event_name == 'workflow_dispatch'
        run: markdownlint ${{ steps.changed-files.outputs.all_changed_files || 'src/*.md' }} --config .markdownlint.json
        continue-on-error: true

      - name: Install lychee (link checker)
        run: |
          curl -sSfL https://github.com/lycheeverse/lychee/releases/latest/download/lychee-x86_64-unknown-linux-gnu.tar.gz | tar -xzf -
          sudo mv lychee /usr/local/bin/

      - name: Check links in source files
        run: lychee src/*.md --config .lycheerc.toml
        continue-on-error: true

      # Spell checking
      - name: Install cspell
        run: npm install -g cspell

      - name: Check spelling in source files
        run: cspell "src/*.md" --config .cspell.json
        continue-on-error: true

      - name: Update README
        uses: abhinav/stitchmd-action@v1
        with:
          mode: write
          summary: src/RESUME.md
          output: README.md

      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install -y pandoc wkhtmltopdf

      # Cache PDF artifacts for performance
      - name: Cache PDF artifacts
        id: cache-pdf
        uses: actions/cache@v4
        with:
          path: |
            RESUME.pdf
            RESUME.html
          key: pdf-${{ hashFiles('src/**/*.md', 'src/PDF_ATS.css', 'README.md') }}
          restore-keys: |
            pdf-

      - name: Convert Markdown to HTML with ATS-friendly CSS
        if: steps.cache-pdf.outputs.cache-hit != 'true'
        run: pandoc README.md -o RESUME.html --standalone --css=src/PDF_ATS.css --metadata title="Victor Witkamp - Resume"

      - name: Convert HTML to PDF (ATS-optimized)
        if: steps.cache-pdf.outputs.cache-hit != 'true'
        run: wkhtmltopdf --enable-local-file-access --page-size A4 --orientation Portrait --margin-top 15mm --margin-bottom 15mm --margin-left 15mm --margin-right 15mm RESUME.html RESUME.pdf

      # Test PDF generation
      - name: Verify PDF was generated correctly
        run: |
          test -s RESUME.pdf
          echo "✅ PDF file exists and is not empty"
          # Check if PDF has content (size > 10KB indicates real content)
          size=$(stat -f%z RESUME.pdf 2>/dev/null || stat -c%s RESUME.pdf)
          if [ "$size" -gt 10240 ]; then
            echo "✅ PDF file appears to have content ($size bytes)"
          else
            echo "⚠️ PDF file seems unusually small ($size bytes)"
            exit 1
          fi

      - name: Insert PDF link after
        run: |
          sed -i '/^# Resume$/a\
          [Download my Resume PDF](https://victorwitkamp.github.io/resume/RESUME.pdf) (ATS-friendly)
          ' README.md

      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Build with Jekyll
        uses: actions/jekyll-build-pages@v1
        with:
          source: ./
          destination: ./_site

      - name: Fix permissions for _site directory
        run: sudo chown -R $(id -u):$(id -g) _site

      - name: Copy PDF to site
        run: cp RESUME.pdf _site/RESUME.pdf

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
